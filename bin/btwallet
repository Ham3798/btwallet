#!/usr/bin/env python

# The MIT License (MIT)
# Copyright © 2024 OpenTensor Foundation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

"""This module provides the command-line interface (CLI) entry point for Bittensor Wallet."""
from typing import Optional

import typer

from bittensor_wallet.wallet import Wallet, BT_WALLET_NAME
from bittensor_wallet import __version__

app = typer.Typer(help=f"Welcome to the Bittensor Wallet CLI v.{__version__}. For detailed help, use --help.")


@app.command()
def show(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.path", help="Wallet directory path.")
):
    """Shows/prints the contents of the wallet as a string representation."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(wallet)


@app.command()
def create(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.path", help="Wallet directory path.")
):
    """Create a new wallet with specified name, hotkey, and path."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(wallet.create())


@app.command()
def recreate(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.path", help="Wallet directory path.")
):
    """Re-creates a new wallet with specified name, hotkey, and path."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(wallet.recreate())


@app.command()
def hotkey(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.path", help="Wallet directory path.")
):
    """Prints the wallet's hotkey."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(f"Wallet: {wallet_name}")

    if wallet.hotkey is not None:
        print(f"Hotkey: {wallet.hotkey}")


@app.command()
def coldkeypub(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.path", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Wallet directory path.")
):
    """Prints the wallet's coldkey."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(f"Wallet: {wallet_name}")

    if wallet.coldkeypub is not None:
        print(f"Hotkey: {wallet.coldkeypub}")


@app.command()
def coldkey(
        wallet_name: Optional[str] = typer.Option(BT_WALLET_NAME, "--wallet.name", help="Wallet name."),
        wallet_hotkey: Optional[str] = typer.Option(None, "--wallet.hotkey", help="Hotkey name."),
        wallet_path: Optional[str] = typer.Option(None, "--wallet.path", help="Wallet directory path.")
):
    """Prints the wallet's coldkeypub."""
    wallet = Wallet(name=wallet_name, hotkey=wallet_hotkey, path=wallet_path)
    print(f"Wallet name: {wallet_name}")

    if wallet.coldkey is not None:
        print(f"Hotkey: {wallet.coldkey}")


if __name__ == '__main__':
    app()
